# -------HTTP REST CLIENT -------
# https://marketplace.visualstudio.com/items?itemName=humao.rest-client

## This script will test the functionality of the reindex API for Indexer service



# -----------------------
# OAUTH (Variables)
# -----------------------
###
@login_base = login.microsoftonline.com/{{TENANT_ID}}
@oauth_token_host = {{login_base}}/oauth2/v2.0/token
@scopes = {{CLIENT_ID}}/.default openid profile offline_access



# -----------------------
# OAUTH  authorization_code
# -----------------------
###
# @name login
@login_base = login.microsoftonline.com/{{TENANT_ID}}
@oauth_token_host = {{login_base}}/oauth2/token
POST https://{{oauth_token_host}} HTTP/1.1
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{PRINCIPAL_ID}}
&client_secret={{PRINCIPAL_SECRET}}
&resource={{CLIENT_ID}}



# -----------------------
# API (Variables)
# -----------------------
###
@access_token = {{login.response.body.access_token}}
@ENDPOINT = https://{{OSDU_HOST}}
@LEGAL_HOST = {{ENDPOINT}}/api/legal/v1
@STORAGE_HOST = {{ENDPOINT}}/api/storage/v2
@SEARCH_HOST = {{ENDPOINT}}/api/search/v2
@INDEXER_HOST = {{ENDPOINT}}/api/indexer/v2
@SCHEMA_HOST = {{ENDPOINT}}/api/schema-service/v1
@data_partition_id = opendes
@tag =  {{data_partition_id}}-rest-client-validation-1
@authority = {{data_partition_id}}
@source = reindextest
@entityType = dummydata
@schemaVersionMajor = 1
@schemaVersionMinor = 0
@schemaVersionPatch = 0
@kind = {{authority}}:{{source}}:{{entityType}}:{{schemaVersionMajor}}.{{schemaVersionMinor}}.{{schemaVersionPatch}}
@index = {{authority}}-{{source}}-{{entityType}}-{{schemaVersionMajor}}.{{schemaVersionMinor}}.{{schemaVersionPatch}}

# -----------------------
# Create legal tag and schema to be used for reindex records.
# -----------------------

###
# @name createTag
POST {{LEGAL_HOST}}/legaltags
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "name": "{{tag}}",
  "description": "This tag is used by Data Upload Scripts",
  "properties": {
    "countryOfOrigin": [
      "US"
    ],
    "contractId": "A1234",
    "expirationDate": "2021-12-31",
    "originator": "MyCompany",
    "dataType": "Transferred Data",
    "securityClassification": "Public",
    "personalData": "No Personal Data",
    "exportClassification": "EAR99"
  }
}

###
# @name createSchema
POST {{SCHEMA_HOST}}/schema
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "schemaInfo": {
    "schemaIdentity": {
      "authority": "{{authority}}",
      "source": "{{source}}",
      "entityType": "{{entityType}}",
      "schemaVersionMajor": "{{schemaVersionMajor}}",
      "schemaVersionMinor": "{{schemaVersionMinor}}",
      "schemaVersionPatch": "{{schemaVersionPatch}}"
    },
    "status": "DEVELOPMENT"
  },
  "schema": {
    "properties": {
      "data": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "Field": {
                "type": "string"
              },
              "Location": {
                "$ref": "#/definitions/core_dl_geopoint",
                "description": "The wellbores position .",
                "format": "core:dl:geopoint:1.0.0",
                "title": "WGS 84 Position",
                "type": "object"
              },
              "Basin": {
                "type": "string"
              },
              "County": {
                "type": "string"
              }
            }
          }
        ],
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "State": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "WellStatus": {
                "type": "string"
              },
              "OriginalOperator": {
                "type": "string"
              },
              "WellName": {
                "type": "string"
              },
              "WellType": {
                "type": "string"
              },
              "EmptyAttribute": {
                "type": "string"
              }
            }
          }
        ],
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "Rank": {
                "type": "integer"
              },
              "Score": {
                "type": "integer"
              },
              "Established": {
                "type": "date-time"
              },
              "DblArray": {
                "description": "The name of the host [cloud environment] region(s) for this OSDU resource object.",
                "title": "Resource Host Region ID",
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      }
    }
  }
}

# -----------------------
# Verify they both exist now
# -----------------------

###
# @name getTag
GET {{LEGAL_HOST}}/legaltags/{{tag}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}


# -----------------------
# Create storage record to be reindex
# -----------------------

###
# @name getSchema
GET {{SCHEMA_HOST}}/schema/{{kind}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}

###
# @name createRecord
PUT {{STORAGE_HOST}}/records
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

[
  {
    "kind": "{{kind}}",
    "legal": {
      "legaltags": [
        "{{tag}}"
      ],
      "otherRelevantDataCountries": [
        "US"
      ],
      "status": "compliant"
    },
    "acl": {
      "viewers": [
        "data.default.viewer@{{data_partition_id}}.contoso.com"
      ],
      "owners": [
        "data.default.owner@{{data_partition_id}}.contoso.com"
      ]
    },
    "data": {
      "Basin": "Houston",
      "County": "Harris"
    },
    "tags": {
      "testtag": "testvalue"
    }
  }
]


@id = {{createRecord.response.body.recordIds[0]}}

# -----------------------
# Verify record can be retrieved from storage service and search service now
# -----------------------

###
# @name GetRecord
GET {{STORAGE_HOST}}/records/{{id}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}

###
# @name GetRecordByKind
GET {{STORAGE_HOST}}/query/records?kind={{kind}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}

###
# @name searchRecord (note this might have a delay before record is indexed)
POST {{SEARCH_HOST}}/query
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "kind": "{{kind}}",
  "offset": 0,
  "limit": 5
}

# -----------------------
# Verify index exists in elastic, delete the index, and verify index no longer exists and record can no longer be searched
# -----------------------

###
# @name getElastic
GET {{ES_HOST}}/{{index}}/_search?pretty
Authorization: Basic {{ES_AUTH_TOKEN}}
Accept: application/json

###
# @name deleteElastic
DELETE {{ES_HOST}}/{{index}}
Authorization: Basic {{ES_AUTH_TOKEN}}
Accept: application/json

###
# @name searchRecord (you should get no results since the index is deleted now)
POST {{SEARCH_HOST}}/query
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "kind": "{{kind}}",
  "offset": 0,
  "limit": 5
}

# -----------------------
# Call reindex API to recreate index and index records
# -----------------------

###
# @name reindexKind
POST {{INDEXER_HOST}}/reindex
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "kind": "{{kind}}"
}

# -----------------------
# Verify index in elastic now exists again and records can be searched again (note this might have a delay before record is reindexed)
# -----------------------

###
# @name getElastic
GET {{ES_HOST}}/{{index}}/_search?pretty
Authorization: Basic {{ES_AUTH_TOKEN}}
Accept: application/json

###
# @name searchRecord
POST {{SEARCH_HOST}}/query
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "kind": "{{kind}}",
  "offset": 0,
  "limit": 5
}

# -----------------------
# Clean up resources
# -----------------------

###
# @name deleteRecord
DELETE {{STORAGE_HOST}}/records/{{id}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}

###
# @name deleteElastic
DELETE {{ES_HOST}}/{{index}}
Authorization: Basic {{ES_AUTH_TOKEN}}
Accept: application/json

###
# @name deleteTag
DELETE {{LEGAL_HOST}}/legaltags/{{tag}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
