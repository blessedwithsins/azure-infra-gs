# -------HTTP REST CLIENT -------
# https://marketplace.visualstudio.com/items?itemName=humao.rest-client

## This script provides a few samples for calling entitlements v2.



# -----------------------
# OAUTH (Variables)
# -----------------------
###
@login_base = login.microsoftonline.com/{{TENANT_ID}}
@oauth_token_host = {{login_base}}/oauth2/v2.0/token
@scopes = {{CLIENT_ID}}/.default openid profile offline_access



# -----------------------
# OAUTH  client_credentials
# -----------------------
###
# @name login
@login_base = login.microsoftonline.com/{{TENANT_ID}}
@oauth_token_host = {{login_base}}/oauth2/token
POST https://{{oauth_token_host}} HTTP/1.1
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{PRINCIPAL_ID}}
&client_secret={{PRINCIPAL_SECRET}}
&resource={{CLIENT_ID}}



# -----------------------
# API (Variables)
# -----------------------
###
@access_token = {{login.response.body.access_token}}
@ENDPOINT = https://{{OSDU_HOST}}
@ENTITLEMENTS_HOST = {{ENDPOINT}}/api/entitlements/v2
@data_partition_id = opendes
@group_name = rest-client-test-group
@domain = contoso.com
@group_email = {{group_name}}@{{data_partition_id}}.{{domain}}
# NOTE: This is the identifier for the user you are adding to a group. This is NOT necesarily an email, it is whatever value the Istio Envoy filters are passing to entitlements v2 to identifier a user.
# When using AAD, this is the email for the user if adding an AAD user and the oid if adding a service principal, when using other IDPs, this may vary.
@user_email = test_user@test.com


# -----------------------
# API: entitlements-v2
# -----------------------

###
# NOTE: This API can ONLY be called by the application service principal. 
# Tenant init. Used to create intitial group vertices in the graph database for a tenant once that tenant is created.
# @name tenantInit
POST {{ENTITLEMENTS_HOST}}/tenant-provisioning
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}

###
# Get groups for the user encoded in the token
# @name myGroups
GET {{ENTITLEMENTS_HOST}}/groups
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}


###
# Create a new group
# @name createGroup
POST {{ENTITLEMENTS_HOST}}/groups
Authorization: Bearer {{access_token}}
Content-Type: application/json
data-partition-id: {{data_partition_id}}

{
  "name": "{{group_name}}",
  "description": "demo group"
}

###
# Add user to a group. Note this is the same API used to create hierarchichal groups, but instead of the email for a user, you pass in the email for the group you want to add.
# @name addUserToGroup
POST {{ENTITLEMENTS_HOST}}/groups/{{group_email}}/members
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json

{
  "email": "{{user_email}}",
  "role": "MEMBER"
}

###
# Add user from a group
# @name deleteUserFromGroup
DELETE {{ENTITLEMENTS_HOST}}/groups/{{group_email}}/members/{{user_email}}
Authorization: Bearer {{access_token}}
Accept: application/json
data-partition-id: {{data_partition_id}}
Content-Type: application/json
