apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: basic-auth-for-airflow
  namespace: osdu
spec:
  workloadSelector:
    labels:
      app: airflow
      # customLabel: airflow-sidecar
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.http_connection_manager
              subFilter:
                name: envoy.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua.custom-airflow
          typed_config:
            "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
            inlineCode: |
              local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
              function starts_with(str, start)
                 return str:sub(1, #start) == start
              end

              function dec(data)
                  -- You will need this for encoding/decoding
                  -- local b ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                  data = string.gsub(data, '[^'..b..'=]', '')
                  return (data:gsub('.', function(x)
                      if (x == '=') then return '' end
                      local r,f='',(b:find(x)-1)
                      for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                      return r;
                  end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                      if (#x ~= 8) then return '' end
                      local c=0
                      for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                      return string.char(c)
                  end))
              end

              function split(pString, pPattern)
                 local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
                 local fpat = "(.-)" .. pPattern
                 local last_end = 1
                 local s, e, cap = pString:find(fpat, 1)
                 while s do
                    if s ~= 1 or cap ~= "" then
                   table.insert(Table,cap)
                    end
                    last_end = e+1
                    s, e, cap = pString:find(fpat, last_end)
                 end
                 if last_end <= #pString then
                    cap = pString:sub(last_end)
                    table.insert(Table, cap)
                 end
                 return Table
              end

              function envoy_on_request(request_handle)
                request_handle:logCritical("Custom Envoy")
                -- Log information about the request
                local authHeader = request_handle:headers():get("Authorization")
                request_handle:logCritical(authHeader)
                if starts_with(authHeader, "Basic") then
                  local encodedCredential = string.sub(authHeader, 7)
                  request_handle:logCritical(encodedCredential)
                  local decodedCredential = dec(encodedCredential)
                  request_handle:logCritical(decodedCredential)
                  local credsList = split(decodedCredential, ":")
                  local username = credsList[1]
                  local password = credsList[2]
                  request_handle:logCritical(username)
                  request_handle:logCritical(password)
                  request_handle:logCritical("Sending 403")
                  request_handle:respond({[":status"] = "403"},"error")
                end
              end
