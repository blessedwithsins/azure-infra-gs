apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: basic-auth-for-airflow
  namespace: osdu
spec:
  workloadSelector:
    labels:
      app: airflow
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.http_connection_manager
              subFilter:
                name: envoy.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua.basic-auth-for-airflow
          typed_config:
            "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
            inlineCode: |
              function starts_with(str, start)
                 return str:sub(1, #start) == start
              end

              function decode(data)
                  -- Base64 decoder method
                  local b ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                  data = string.gsub(data, '[^'..b..'=]', '')
                  return (data:gsub('.', function(x)
                      if (x == '=') then return '' end
                      local r,f='',(b:find(x)-1)
                      for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                      return r;
                  end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                      if (#x ~= 8) then return '' end
                      local c=0
                      for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                      return string.char(c)
                  end))
              end

              function split(pString, pPattern)
                 local Table = {}  -- NOTE: use {n = 0} in Lua-5.0
                 local fpat = "(.-)" .. pPattern
                 local last_end = 1
                 local s, e, cap = pString:find(fpat, 1)
                 while s do
                    if s ~= 1 or cap ~= "" then
                   table.insert(Table,cap)
                    end
                    last_end = e+1
                    s, e, cap = pString:find(fpat, last_end)
                 end
                 if last_end <= #pString then
                    cap = pString:sub(last_end)
                    table.insert(Table, cap)
                 end
                 return Table
              end

              function read_file(path)
                local file = io.open(path, "rb") -- r read mode and b binary mode
                if not file then return nil end
                local content = file:read "*a" -- *a or *all reads the whole file
                file:close()
                return content
              end

              function envoy_on_request(request_handle)
                local authHeader = request_handle:headers():get("Authorization")
                if starts_with(authHeader, "Basic") then
                  local encodedCredential = string.sub(authHeader, 7)
                  local decodedCredential = decode(encodedCredential)
                  local credsList = split(decodedCredential, ":")

                  local username = credsList[1]
                  local password = credsList[2]

                  local airflowUsername = "{{ .Values.global.airflow.username }}"
                  local airflowPasswordFilepath = "{{ .Values.global.airflow.keyvaultMountPath }}" .. "{{ .Values.global.airflow.passwordKey }}"
                  local airflowPassword = read_file(airflowPasswordFilepath)

                  if (username == airflowUsername and password == airflowPassword) then
                    request_handle:logInfo("Airflow authentication successful")
                  else
                    request_handle:logErr("Airflow authentication failed: Invalid username/password")
                    request_handle:respond({[":status"] = "401"}, "Airflow authentication failed: Invalid username/password")
                  end
                else
                    request_handle:logErr("Airflow authentication failed: Only Basic authentication is supported")
                    request_handle:respond({[":status"] = "401"}, "Airflow authentication failed: Only Basic authentication is supported")
                end
              end